 INTRODUCTION TO ALGORITHMS
 The term algorithm simply refers to a set of instructions that is used to do something.
 Your daily life is full of algorithms, even though you likely don't call them that. Particularly good algorithms are efficient, repeatable, and elegant. However, these aren't requirements.
 Just with other steps requred to doing something algorithm also require some kind of input in order to create an output
 While not required, almost every algorithm makes use of some kind of input. That input is used to help the algorithm accomplish its intended goal, or output.

WRITING AN ALGORITHMS
Some the questions to ask your self before writing an algorithm:

1. What is the desired output of this algorithm?
2. What inputs are required to achieve this outcome?
3. What set of steps need to be followed in order to achieve the output?
Once you've answered these questions, you should write a set of instructions that is as precise as possible.
Precise algorithms have a better chance of resulting in your intended outcome.

Edge cases and the "happy path"
An edge case is a situation that occurs during the process of executing an algorithm that, while unlikely, needs to be accounted for.
Edge cases are important to keep in mind when thinking about algorithms. 
The "happy path" references the most typical scenario for an algorithm. In the cookie example above, the "happy path" could be referred to as the cookies being perfectly baked at 10 minutes exactly.
When designing algorithms, first design for the "happy path" and then consider any edge cases that may occur.



DATA STRUCTURES
a data structure is a data organization, management, and storage format that is usually chosen for efficient access to data. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data, i.e., it is an algebraic structure about data.

Data structures serve as the basis for abstract data types (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the data type.

Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, relational databases commonly use B-tree indexes for data retrieval, while compiler implementations usually use hash tables to look up identifiers.

Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both main memory and secondary memory.


